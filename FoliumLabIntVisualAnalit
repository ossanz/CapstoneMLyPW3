import piplite
await piplite.install(['folium'])
await piplite.install(['pandas'])

import folium
import pandas as pd

# Import folium MarkerCluster plugin
from folium.plugins import MarkerCluster
# Import folium MousePosition plugin
from folium.plugins import MousePosition
# Import folium DivIcon plugin
from folium.features import DivIcon


## Task 1: Mark all launch sites on a map


# Download and read the `spacex_launch_geo.csv`
from js import fetch
import io

URL = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/spacex_launch_geo.csv'
resp = await fetch(URL)
spacex_csv_file = io.BytesIO((await resp.arrayBuffer()).to_py())
spacex_df=pd.read_csv(spacex_csv_file)

# Select relevant sub-columns: `Launch Site`, `Lat(Latitude)`, `Long(Longitude)`, `class`
spacex_df = spacex_df[['Launch Site', 'Lat', 'Long', 'class']]
launch_sites_df = spacex_df.groupby(['Launch Site'], as_index=False).first()
launch_sites_df = launch_sites_df[['Launch Site', 'Lat', 'Long']]
launch_sites_df

# Start location is NASA Johnson Space Center
nasa_coordinate = [29.559684888503615, -95.0830971930759]
site_map = folium.Map(location=nasa_coordinate, zoom_start=10)

# Create a blue circle at NASA Johnson Space Center's coordinate with a popup label showing its name
circle = folium.Circle(nasa_coordinate, radius=1000, color='#d35400', fill=True).add_child(folium.Popup('NASA Johnson Space Center'))
# Create a blue circle at NASA Johnson Space Center's coordinate with a icon showing its name
marker = folium.map.Marker(
    nasa_coordinate,
    # Create an icon as a text label
    icon=DivIcon(
        icon_size=(20,20),
        icon_anchor=(0,0),
        html='<div style="font-size: 12; color:#d35400;"><b>%s</b></div>' % 'NASA JSC',
        )
    )
site_map.add_child(circle)

# Initial the map
site_map = folium.Map(location=nasa_coordinate, zoom_start=5)
# For each launch site, add a Circle object based on its coordinate (Lat, Long) values. In addition, add Launch site name as a popup label

lc40 = [28.562302, -80.577356]
slc40 = [28.563197 , -80.576820]
ksc = [28.573255, -80.646895]
vafb = [34.632834, -120.610745]
site_map = folium.Map(location=nasa_coordinate, zoom_start=4)
# Create a blue circle at LC40 coordinate with a popup label showing its name
circle = folium.Circle(lc40, radius=100, color='#d35400', fill=True).add_child(folium.Popup('CCAFS LC-40'))
# Create a blue circle at NASA Johnson Space Center's coordinate with a icon showing its name
marker = folium.map.Marker(
    lc40,
    # Create an icon as a text label
    icon=DivIcon(
        icon_size=(20,20),
        icon_anchor=(0,0),
        html='<div style="font-size: 12; color:#d35400;"><b>%s</b></div>' % 'CCAFS LC-40',
        )
    )
site_map.add_child(circle)
site_map.add_child(marker)

# Create a blue circle at SLC40 coordinate with a popup label showing its name
circle = folium.Circle(slc40, radius=100, color='#d35400', fill=True).add_child(folium.Popup('CCAFS SLC-40'))
# Create a blue circle at NASA Johnson Space Center's coordinate with a icon showing its name
marker = folium.map.Marker(
    slc40,
    # Create an icon as a text label
    icon=DivIcon(
        icon_size=(20,20),
        icon_anchor=(0,0),
        html='<div style="font-size: 12; color:#d35400;"><b>%s</b></div>' % 'CCAFS SLC-40',
        )
    )
site_map.add_child(circle)
site_map.add_child(marker)

# Create a blue circle at Kennedy Space Center LC-39A coordinate with a popup label showing its name
circle = folium.Circle(ksc, radius=1000, color='#d35400', fill=True).add_child(folium.Popup('Kennedy Space Center LC-39A'))
# Create a blue circle at NASA Johnson Space Center's coordinate with a icon showing its name
marker = folium.map.Marker(
    ksc,
    # Create an icon as a text label
    icon=DivIcon(
        icon_size=(20,20),
        icon_anchor=(0,0),
        html='<div style="font-size: 12; color:#d35400;"><b>%s</b></div>' % 'KSC LC-39A',
        )
    )
site_map.add_child(circle)
site_map.add_child(marker)

# Create a blue circle at VAFB SLC-4E coordinate with a popup label showing its name
circle = folium.Circle(vafb, radius=1000, color='#d35400', fill=True).add_child(folium.Popup('VAFB SLC-4E'))
# Create a blue circle at NASA Johnson Space Center's coordinate with a icon showing its name
marker = folium.map.Marker(
    vafb,
    # Create an icon as a text label
    icon=DivIcon(
        icon_size=(20,20),
        icon_anchor=(0,0),
        html='<div style="font-size: 12; color:#d35400;"><b>%s</b></div>' % 'VAFB SLC-4E',
        )
    )
site_map.add_child(circle)
site_map.add_child(marker)


# Task 2: Mark the success/failed launches for each site on the map

spacex_df.tail(15)

marker_cluster = MarkerCluster()


# Apply a function to check the value of `class` column
# If class=1, marker_color value will be green
# If class=0, marker_color value will be red
# Add marker_cluster to current site_map site_map.add_child(marker_cluster) 
# for each row in spacex_df data frame # create a Marker object with its coordinate 
# and customize the Marker's icon property to indicate if this launch was successed or failed, # e.g., icon=folium.Icon(color='white', icon_color=row['marker_color'] for index, record in spacex_df.iterrows(): marker = folium.map.Marker([spacex_df['Lat'][index], spacex_df['Long'][index]], icon=folium.Icon(color='white', icon_color=spacex_df['marker_color'][index])).add_to(marker_cluster) #marker_cluster.add_child(marker) site_map.add_child(marker_cluster) site_map 
    
# Function to assign color to launch outcome
def assign_marker_color(launch_outcome):
    if launch_outcome == 1:
        return 'green'
    else:
        return 'red'
    
spacex_df['marker_color'] = spacex_df['class'].apply(assign_marker_color)
spacex_df.tail(10)


# Add marker_cluster to current site_map
site_map.add_child(marker_cluster)

# for each row in spacex_df data frame
# create a Marker object with its coordinate
# and customize the Marker's icon property to indicate if this launch was successed or failed, 
# e.g., icon=folium.Icon(color='white', icon_color=row['marker_color']
for index, record in spacex_df.iterrows():
    marker = folium.map.Marker([spacex_df['Lat'][index], spacex_df['Long'][index]],
    icon=folium.Icon(color='white', icon_color=spacex_df['marker_color'][index])).add_to(marker_cluster)                           
    #marker_cluster.add_child(marker)

site_map.add_child(marker_cluster)
site_map


# TASK 3: Calculate the distances between a launch site to its proximities

# Add Mouse Position to get the coordinate (Lat, Long) for a mouse over on the map
formatter = "function(num) {return L.Util.formatNum(num, 5);};"
mouse_position = MousePosition(
    position='topright',
    separator=' Long: ',
    empty_string='NaN',
    lng_first=False,
    num_digits=20,
    prefix='Lat:',
    lat_formatter=formatter,
    lng_formatter=formatter,
)

site_map.add_child(mouse_position)
site_map


from math import sin, cos, sqrt, atan2, radians

def calculate_distance(lat1, lon1, lat2, lon2):
    # approximate radius of earth in km
    R = 6373.0

    lat1 = radians(lat1)
    lon1 = radians(lon1)
    lat2 = radians(lat2)
    lon2 = radians(lon2)

    dlon = lon2 - lon1
    dlat = lat2 - lat1

    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))

    distance = R * c
    return distance


# find coordinate of the closet coastline
# e.g.,: Lat: 28.56367  Lon: -80.57163

#distance_coastline = calculate_distance(launch_site_lat, launch_site_lon, coastline_lat, coastline_lon)
distance_coastline = calculate_distance(28.56321, -80.57681, 28.56339, -80.568)

# Create and add a folium.Marker on your selected closest coastline point on the map
# Display the distance between coastline point and launch site using the icon property 

coast_coordinate = [28.56339, -80.568]
launch_coordinate = [28.56321, -80.57681]
distance_marker = folium.Marker(
    coast_coordinate,
    icon=DivIcon(
        icon_size=(20,20),
        icon_anchor=(0,0),
        html='<div style="font-size: 12; color:#d35400;"><b>%s</b></div>' % "{:10.2f} KM".format(distance_coastline),
        )
    )
site_map.add_child(distance_marker)

#28.56339, -80.568

# Create a `folium.PolyLine` object using the coastline coordinates and launch site coordinate
# lines=folium.PolyLine(locations=coordinates, weight=1)
lines=folium.PolyLine(locations=[launch_coordinate, coast_coordinate], weight=1)
site_map.add_child(lines)

# Create a marker with distance to a closest city
# Draw a line between the marker to the launch site

#distance_coastline = calculate_distance(launch_site_lat, launch_site_lon, city_lat, city_lon)
distance_city = calculate_distance(28.56321, -80.57681, 28.40482, -80.5974)
city_coordinate = [28.40482, -80.5974]
#launch_coordinate = [28.56321, -80.57681]
distance_marker2 = folium.Marker(
    city_coordinate,
    icon=DivIcon(
        icon_size=(20,20),
        icon_anchor=(0,0),
        html='<div style="font-size: 12; color:#d35400;"><b>%s</b></div>' % "{:10.2f} KM".format(distance_city),
        )
    )
site_map.add_child(distance_marker2)

lines2=folium.PolyLine(locations=[launch_coordinate, city_coordinate], weight=1)
site_map.add_child(lines2)

# Create a marker with distance to a closest highway
# Draw a line between the marker to the launch site
distance_hw = calculate_distance(28.56321, -80.57681, 28.56265, -80.57066)
hw_coordinate = [28.56265, -80.57066]
#launch_coordinate = [28.56321, -80.57681]
distance_marker2 = folium.Marker(
    hw_coordinate,
    icon=DivIcon(
        icon_size=(20,20),
        icon_anchor=(0,0),
        html='<div style="font-size: 12; color:#d35400;"><b>%s</b></div>' % "{:10.2f} KM".format(distance_hw),
        )
    )
site_map.add_child(distance_marker2)

lines2=folium.PolyLine(locations=[launch_coordinate, hw_coordinate], weight=1)
site_map.add_child(lines2)


